"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ö –≤ Telegram.
"""

import logging
import asyncio
from typing import Optional
from telegram import Bot
from appeals_service import AppealsService

logger = logging.getLogger(__name__)


class ResponseMonitor:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤."""
    
    def __init__(self, appeals_service: AppealsService, bot_token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤.
        
        Args:
            appeals_service: —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏
            bot_token: —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        """
        self.appeals_service = appeals_service
        self.bot = Bot(token=bot_token)
        self.is_running = False
        self._task = None

    async def start_monitoring(self, interval_seconds: int = 60):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.
        
        Args:
            interval_seconds: –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60)
        """
        if self.is_running:
            logger.warning("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.is_running = True
        logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–æ–≤ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval_seconds} —Å–µ–∫)")
        
        self._task = asyncio.create_task(self._monitoring_loop(interval_seconds))

    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤."""
        if not self.is_running:
            return

        self.is_running = False
        if self._task:
            self._task.cancel()
            try:
                await self._task
            except asyncio.CancelledError:
                pass
        
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _monitoring_loop(self, interval_seconds: int):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
                if self.appeals_service.has_records():
                    await self._check_and_send_responses()
                else:
                    logger.debug("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(interval_seconds)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(interval_seconds)  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _check_and_send_responses(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤."""
        try:
            responses = self.appeals_service.check_for_responses()
            
            for response_data in responses:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ "—Ä–µ—à–µ–Ω–æ"
                if self._is_resolved_response(response_data.get('response', '')):
                    await self._mark_as_resolved(response_data)
                else:
                    await self._send_response(response_data)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–æ–≤: {e}")

    def _is_resolved_response(self, response_text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ "—Ä–µ—à–µ–Ω–æ".
        
        Args:
            response_text: —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
        """
        if not response_text:
            return False
            
        text_lower = response_text.lower()
        
        # –¢—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "—Ä–µ—à–µ–Ω–æ"
        resolved_phrases = [
            '—Ä–µ—à–µ–Ω–æ', '—Ä–µ—à–µ–Ω', '—Ä–µ—à–µ–Ω–∞', '—Ä–µ—à–µ–Ω—ã',
            '–≥–æ—Ç–æ–≤–æ', '–≥–æ—Ç–æ–≤', '–≥–æ—Ç–æ–≤–∞', '–≥–æ—Ç–æ–≤—ã',
            '—Å–ø–∞—Å–∏–±–æ', '—Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ', '—Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å',
            '–≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ', '–≤—Å–µ —è—Å–Ω–æ', '–≤—Å–µ –≥–æ—Ç–æ–≤–æ',
            '–≤–æ–ø—Ä–æ—Å —Ä–µ—à–µ–Ω', '–ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞', '–∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
            '–æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ', '–º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å', '–∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ',
            '—Å—Ç–∞—Ç—É—Å —Ä–µ—à–µ–Ω–æ', '–æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–µ', '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            '–ø–æ–ª—É—á–∏–ª–∏ –ø–æ–º–æ—â—å', '–≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–ø—Ä–æ–±–ª–µ–º–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞',
            '–≤–æ–ø—Ä–æ—Å —Å–Ω—è—Ç', '–±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç', '–≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç',
            '–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ', '–∑–∞–ø—É—â–µ–Ω–æ', '—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
            '–æ—à–∏–±–∫–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞', '—Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å', '–ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç',
            '–≤–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç', '–±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ', '–≤—Å–µ —è—Å–Ω–æ'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑
        for phrase in resolved_phrases:
            if phrase in text_lower:
                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ñ—Ä–∞–∑–∞ '—Ä–µ—à–µ–Ω–æ': '{phrase}' –≤ –æ—Ç–≤–µ—Ç–µ: {response_text[:100]}...")
                return True
        
        return False

    async def _mark_as_resolved(self, response_data: dict):
        """
        –û—Ç–º–µ—á–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            response_data: –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
        """
        try:
            telegram_id = response_data['telegram_id']
            response_text = response_data['response']
            fio = response_data.get('fio', '')
            code = response_data.get('code', '')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏
            message = f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –æ—Ç–¥–µ–ª–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞!\n\n{response_text}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=telegram_id,
                text=message
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "—Ä–µ—à–µ–Ω–æ" —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–∞–ª–∏–≤–∫–æ–π
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "—Ä–µ—à–µ–Ω–æ" –≤ –∫–æ–ª–æ–Ω–∫–µ F
                self.appeals_service.worksheet.batch_update([{
                    'range': f'F{response_data["row"]}',
                    'values': [['–†–µ—à–µ–Ω–æ']]
                }])
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ª–∏–≤–∫—É #d9ead3 (—Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π) –≤ –∫–æ–ª–æ–Ω–∫–µ F
                self.appeals_service.worksheet.format(f'F{response_data["row"]}', {
                    "backgroundColor": {
                        "red": 0.85,  # #d9ead3
                        "green": 0.92,
                        "blue": 0.83
                    }
                })
                
                logger.info(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–†–µ—à–µ–Ω–æ' –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {response_data['row']}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
            self.appeals_service.clear_response(response_data['row'])
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {response_data.get('telegram_id', 'unknown')}: {e}")

    async def _send_response(self, response_data: dict):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            response_data: –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ (row, telegram_id, response, code, fio)
        """
        try:
            telegram_id = response_data['telegram_id']
            response_text = response_data['response']
            fio = response_data.get('fio', '')
            code = response_data.get('code', '')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ)
            message = f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –æ—Ç–¥–µ–ª–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞:\n\n{response_text}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=telegram_id,
                text=message
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –æ–±—Ä–∞—â–µ–Ω–∏–π
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
                specialist_response = f"üë®‚Äçüíº –°–ü–ï–¶–ò–ê–õ–ò–°–¢: {response_text}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞—â–µ–Ω–∏—è–º
                self.appeals_service.add_specialist_response(
                    telegram_id=telegram_id,
                    response_text=specialist_response
                )
                logger.info(f"–û—Ç–≤–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "—Ä–µ—à–µ–Ω–æ" –∏ –æ—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "—Ä–µ—à–µ–Ω–æ" 
                self.appeals_service.worksheet.batch_update([{
                    'range': f'F{response_data["row"]}',
                    'values': [['—Ä–µ—à–µ–Ω–æ']]
                }])
                
                # –£–±–∏—Ä–∞–µ–º –∑–∞–ª–∏–≤–∫—É (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç)
                self.appeals_service.worksheet.format(f'F{response_data["row"]}', {
                    "backgroundColor": {
                        "red": 1.0,
                        "green": 1.0,
                        "blue": 1.0
                    }
                })
                
                logger.info(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '—Ä–µ—à–µ–Ω–æ' –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {response_data['row']}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
            self.appeals_service.clear_response(response_data['row'])
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {response_data.get('telegram_id', 'unknown')}: {e}")

    async def send_test_response(self, telegram_id: int, test_message: str = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤"):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã.
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            test_message: —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            await self.bot.send_message(
                chat_id=telegram_id,
                text=f"üß™ {test_message}"
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
