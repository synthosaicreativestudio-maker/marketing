import logging
import os
import json
import asyncio
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters

from auth_service import AuthService
from openai_service import OpenAIService
from appeals_service import AppealsService
from promotions_api import get_promotions_json, is_promotions_available

logger = logging.getLogger(__name__)

def get_web_app_url() -> str:
    """–õ–µ–Ω–∏–≤–æ–µ —á—Ç–µ–Ω–∏–µ URL WebApp –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ .env)."""
    base_url = os.getenv("WEB_APP_URL") or ""
    if base_url and not base_url.endswith('/'):
        base_url += '/'
    return base_url + "index.html"

def get_spa_menu_url() -> str:
    """–õ–µ–Ω–∏–≤–æ–µ —á—Ç–µ–Ω–∏–µ URL SPA –º–µ–Ω—é –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    base_url = os.getenv("WEB_APP_URL") or ""
    if base_url and not base_url.endswith('/'):
        base_url += '/'
    return base_url + "menu.html"

def create_specialist_button() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.
    """
    keyboard = [[InlineKeyboardButton("üë®‚Äçüíº –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É", callback_data="contact_specialist")]]
    return InlineKeyboardMarkup(keyboard)

def _is_user_escalation_request(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏.
    
    Args:
        text: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
    """
    text_lower = text.lower()
    
    # –¢—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏
    escalation_phrases = [
        '—Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º',
        '–Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
        '–ø–µ—Ä–µ–¥–∞–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É',
        '—Å–æ–µ–¥–∏–Ω–∏—Ç–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
        '—Å–æ–µ–¥–∏–Ω–∏—Ç–µ —Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º',
        '—Ö–æ—á—É –∫ —á–µ–ª–æ–≤–µ–∫—É',
        '–∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫',
        '—Ä–µ–∞–ª—å–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑
    for phrase in escalation_phrases:
        if phrase in text_lower:
            return True
    
    return False

def _should_show_specialist_button(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—Å–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å –µ–≥–æ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º/–∂–∏–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º.
    
    Args:
        text: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É"
    """
    text_lower = text.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
    specialist_keywords = [
        '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º',
        '–∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫', '–∂–∏–≤–æ–º—É —á–µ–ª–æ–≤–µ–∫—É', '–∂–∏–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º',
        '–º–µ–Ω–µ–¥–∂–µ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä–∞', '–º–µ–Ω–µ–¥–∂–µ—Ä—É', '–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
        '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º',
        '–æ–ø–µ—Ä–∞—Ç–æ—Ä', '–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', '–æ–ø–µ—Ä–∞—Ç–æ—Ä—É', '–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º',
        '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º',
        '—Å–æ–µ–¥–∏–Ω–∏—Ç—å', '—Å–æ–µ–¥–∏–Ω–∏—Ç–µ', '—Å–æ–µ–¥–∏–Ω–∏', '—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
        '–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å', '–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å', '–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —á–µ–ª–æ–≤–µ–∫–æ–º',
        '—á–µ–ª–æ–≤–µ–∫', '—á–µ–ª–æ–≤–µ–∫–∞', '—á–µ–ª–æ–≤–µ–∫—É', '—á–µ–ª–æ–≤–µ–∫–æ–º',
        '–ø–æ–∑–≤–æ–Ω–∏—Ç—å', '–ø–æ–∑–≤–æ–Ω–∏—Ç–µ', '–∑–≤–æ–Ω–æ–∫', '–∑–≤–æ–Ω–∏—Ç—å',
        '—Å–≤—è–∑–∞—Ç—å—Å—è', '—Å–≤—è–∑–∞—Ç—å—Å—è —Å', '—Å–≤—è–∑–∞—Ç—å', '—Å–≤—è–∑–∞—Ç—å —Å',
        '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–¥–¥–µ—Ä–∂–∫—É', '–ø–æ–¥–¥–µ—Ä–∂–∫–µ', '–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
        '–ø–æ–º–æ—â—å', '–ø–æ–º–æ—â–∏', '–ø–æ–º–æ—á—å', '–ø–æ–º–æ—â—å—é',
        '–Ω–µ –º–æ–≥—É', '–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
        '–ø—Ä–æ–±–ª–µ–º–∞', '–ø—Ä–æ–±–ª–µ–º—ã', '–ø—Ä–æ–±–ª–µ–º—É', '–ø—Ä–æ–±–ª–µ–º–æ–π',
        '—Å–ª–æ–∂–Ω–æ', '—Å–ª–æ–∂–Ω—ã–π', '—Å–ª–æ–∂–Ω–∞—è', '—Å–ª–æ–∂–Ω–æ–µ',
        '–Ω–µ –ø–æ–Ω–∏–º–∞—é', '–Ω–µ –ø–æ–Ω—è—Ç–Ω–æ', '–Ω–µ —è—Å–Ω–æ',
        '–æ–±—ä—è—Å–Ω–∏—Ç–µ', '–æ–±—ä—è—Å–Ω–∏', '–æ–±—ä—è—Å–Ω–∏—Ç—å',
        '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '–ø–æ–¥—Ä–æ–±–Ω–æ', '–ø–æ–¥—Ä–æ–±–Ω—ã–π',
        '–¥–µ—Ç–∞–ª–∏', '–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è', '–¥–µ—Ç–∞–ª—å–Ω–æ'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for keyword in specialist_keywords:
        if keyword in text_lower:
            return True
    
    return False




def setup_handlers(application, auth_service: AuthService, openai_service: OpenAIService, appeals_service: AppealsService):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."""
    application.add_handler(CommandHandler("start", start_command_handler(auth_service)))
    application.add_handler(CommandHandler("appeals", appeals_command_handler(auth_service, appeals_service)))
    application.add_handler(CommandHandler("promotions", promotions_command_handler(auth_service)))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data_handler(auth_service)))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.StatusUpdate.WEB_APP_DATA, chat_handler(auth_service, openai_service, appeals_service)))
    application.add_handler(CallbackQueryHandler(callback_query_handler(auth_service, appeals_service)))

def start_command_handler(auth_service: AuthService):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /start —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–µ—Ä–≤–∏—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_status = auth_service.get_user_auth_status(user.id)
        logger.info(f"–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {auth_status}")
        if auth_status:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º SPA –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            SPA_MENU_URL = get_spa_menu_url()
            logger.info(f"SPA_MENU_URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {SPA_MENU_URL}")
            if SPA_MENU_URL:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
                keyboard = [
                    [KeyboardButton(
                        text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                        web_app=WebAppInfo(url=SPA_MENU_URL)
                    )]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
                
                await update.message.reply_text(
                    f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MarketingBot! üéØ\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–¥–µ–ª–∞–º.",
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user.first_name}! –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É."
                )
        else:
            WEB_APP_URL = get_web_app_url()
            logger.info(f"WEB_APP_URL –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {WEB_APP_URL}")
            if WEB_APP_URL:
                keyboard_button = KeyboardButton(
                    text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
                    web_app=WebAppInfo(url=WEB_APP_URL)
                )
                reply_markup = ReplyKeyboardMarkup.from_button(keyboard_button, resize_keyboard=True)
                await update.message.reply_text(
                    f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user.first_name}! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.",
                    reply_markup=reply_markup,
                )
            else:
                logger.error("WEB_APP_URL –Ω–µ –∑–∞–¥–∞–Ω, –∫–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞.")
                await update.message.reply_text(
                    f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user.first_name}! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
    return start

def web_app_data_handler(auth_service: AuthService):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App."""
    async def handle_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = update.effective_user
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ Web App –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.first_name})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–∫—Ü–∏–π
        # –î–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...")
        
        try:
            web_app_data = update.effective_message.web_app_data.data
            logger.info(f"–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App: {web_app_data}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not web_app_data:
                logger.warning("–ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App")
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
                
            data = json.loads(web_app_data)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {data}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∞–∫—Ü–∏–π –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if data.get('action') == 'get_promotions':
                logger.info(f"–ó–∞–ø—Ä–æ—Å –∞–∫—Ü–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–∫—Ü–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                auth_status = auth_service.get_user_auth_status(user.id)
                if not auth_status:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ü–∏–∏")
                    await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
                    return
                await handle_promotions_request(update, context)
                return
            
            partner_code = data.get('partner_code')
            partner_phone = data.get('partner_phone')
            
            logger.info(f"–ö–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {partner_code}, –¢–µ–ª–µ—Ñ–æ–Ω: {partner_phone}")

            # –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            auth_result = auth_service.find_and_update_user(partner_code, partner_phone, user.id)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_result}")
            
            if auth_result:
                await update.message.reply_text(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MarketingBot! üéØ",
                    reply_markup=ReplyKeyboardRemove()
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º SPA –º–µ–Ω—é
                SPA_MENU_URL = get_spa_menu_url()
                if SPA_MENU_URL:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
                    keyboard = [
                        [KeyboardButton(
                            text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                            web_app=WebAppInfo(url=SPA_MENU_URL)
                        )]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
                    
                    await update.message.reply_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–¥–µ–ª–∞–º.",
                        reply_markup=reply_markup
                    )
                else:
                    await update.message.reply_text(
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É."
                    )
            else:
                logger.warning("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å - –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                keyboard_button = KeyboardButton(
                    text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é",
                    web_app=WebAppInfo(url=get_web_app_url())
                )
                reply_markup = ReplyKeyboardMarkup.from_button(keyboard_button, resize_keyboard=True)
                await update.message.reply_text(
                    "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=reply_markup
                )
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ Web App: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ web_app_data_handler: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º.")

    return handle_data


def appeals_command_handler(auth_service: AuthService, appeals_service: AppealsService):
    """–§–∞–±—Ä–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /appeals –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π."""
    async def handle_appeals(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = update.effective_user
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /appeals –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not auth_service.get_user_auth_status(user.id):
            await update.message.reply_text(
                "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ /start."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π
        if not appeals_service or not appeals_service.is_available():
            await update.message.reply_text(
                "–°–µ—Ä–≤–∏—Å –æ–±—Ä–∞—â–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        try:
            appeals = appeals_service.get_user_appeals(user.id)
            
            if not appeals:
                await update.message.reply_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ."
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π
            message = "üìã –í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n"
            for i, appeal in enumerate(appeals, 1):
                status_emoji = {
                    '–Ω–æ–≤–æ–µ': 'üÜï',
                    '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ': '‚è≥',
                    '—Ä–µ—à–µ–Ω–æ': '‚úÖ',
                    '–∑–∞–∫—Ä—ã—Ç–æ': 'üîí'
                }.get(appeal.get('—Å—Ç–∞—Ç—É—Å', '').lower(), '‚ùì')
                
                message += f"{i}. {status_emoji} {appeal.get('—Å—Ç–∞—Ç—É—Å', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ–∫–∏)
                appeals_text = appeal.get('—Ç–µ–∫—Å—Ç_–æ–±—Ä–∞—â–µ–Ω–∏–π', '')
                if appeals_text:
                    lines = appeals_text.split('\n')
                    recent_appeals = lines[:2]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –æ–±—Ä–∞—â–µ–Ω–∏—è
                    for appeal_line in recent_appeals:
                        if appeal_line.strip():
                            message += f"   üìù {appeal_line[:80]}{'...' if len(appeal_line) > 80 else ''}\n"
                    
                    if len(lines) > 2:
                        message += f"   ... –∏ –µ—â—ë {len(lines) - 2} –æ–±—Ä–∞—â–µ–Ω–∏–π\n"
                
                if appeal.get('—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç_–æ—Ç–≤–µ—Ç'):
                    message += f"   üí¨ –û—Ç–≤–µ—Ç: {appeal.get('—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç_–æ—Ç–≤–µ—Ç', '')[:100]}{'...' if len(appeal.get('—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç_–æ—Ç–≤–µ—Ç', '')) > 100 else ''}\n"
                message += f"   üïí {appeal.get('–≤—Ä–µ–º—è_–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', '')}\n\n"

            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    return handle_appeals


def promotions_command_handler(auth_service: AuthService):
    """–§–∞–±—Ä–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /promotions –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π."""
    async def handle_promotions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = update.effective_user
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /promotions –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not auth_service.get_user_auth_status(user.id):
            await update.message.reply_text(
                "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ü–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ /start."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ü–∏–π
        if not is_promotions_available():
            await update.message.reply_text(
                "–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ü–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º JSON —Å –∞–∫—Ü–∏—è–º–∏
            promotions_json = get_promotions_json()
            promotions_data = json.loads(promotions_json)
            
            if not promotions_data:
                await update.message.reply_text(
                    "üéâ –ê–∫—Ü–∏–∏ –∏ —Å–æ–±—ã—Ç–∏—è\n\n"
                    "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π –Ω–µ—Ç. "
                    "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ü–∏—è–º–∏
            message = "üéâ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ —Å–æ–±—ã—Ç–∏—è:\n\n"
            for i, promotion in enumerate(promotions_data, 1):
                message += f"{i}. **{promotion.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n"
                message += f"   üìÖ {promotion.get('start_date', '')} - {promotion.get('end_date', '')}\n"
                message += f"   üìù {promotion.get('description', '')[:100]}{'...' if len(promotion.get('description', '')) > 100 else ''}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
            if user.id == int(os.getenv('ADMIN_TELEGRAM_ID', '0')):
                message += f"\nüìä JSON –¥–∞–Ω–Ω—ã–µ:\n```json\n{promotions_json}\n```"

            await update.message.reply_text(
                message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ü–∏–π: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    return handle_promotions

async def handle_promotions_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∞–∫—Ü–∏–π –æ—Ç WebApp."""
    user = update.effective_user
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–∫—Ü–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º JSON —Å –∞–∫—Ü–∏—è–º–∏
        from promotions_api import get_promotions_json, is_promotions_available
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ü–∏–π
        if not is_promotions_available():
            await update.message.reply_text(
                "–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ü–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        promotions_json = get_promotions_json()
        promotions_data = json.loads(promotions_json)
        
        if not promotions_data:
            await update.message.reply_text(
                "üéâ –ê–∫—Ü–∏–∏ –∏ —Å–æ–±—ã—Ç–∏—è\n\n"
                "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π –Ω–µ—Ç. "
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ü–∏—è–º–∏
        message = "üéâ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ —Å–æ–±—ã—Ç–∏—è:\n\n"
        for i, promotion in enumerate(promotions_data, 1):
            message += f"{i}. **{promotion.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n"
            message += f"   üìÖ {promotion.get('start_date', '')} - {promotion.get('end_date', '')}\n"
            message += f"   üìù {promotion.get('description', '')[:100]}{'...' if len(promotion.get('description', '')) > 100 else ''}\n\n"
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∞–∫—Ü–∏–π: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def chat_handler(auth_service: AuthService, openai_service: OpenAIService, appeals_service: AppealsService):
    """–§–∞–±—Ä–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ Threads API.

    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–º OpenAIService ‚Äî –≤–µ–∂–ª–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    async def handle_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = update.effective_user
        text = update.effective_message.text or ""
        logger.info(f"CHAT_HANDLER: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: {text}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not auth_service.get_user_auth_status(user.id):
            await update.message.reply_text(
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ /start."
            )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é (—É–±—Ä–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É" –∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        if appeals_service and appeals_service.is_available():
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                records = auth_service.worksheet.get_all_records()
                user_data = None
                for record in records:
                    if str(record.get('Telegram ID', '')) == str(user.id):
                        user_data = record
                        break
                
                if user_data:
                    logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data}")
                    result = appeals_service.create_appeal(
                        code=user_data.get('–ö–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞', ''),
                        phone=user_data.get('–¢–µ–ª–µ—Ñ–æ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä–∞', ''),
                        fio=user_data.get('–§–ò–û –ø–∞—Ä—Ç–Ω–µ—Ä–∞', ''),
                        telegram_id=user.id,
                        text=text
                    )
                    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {result}")
                else:
                    logger.warning(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}", exc_info=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        if _is_user_escalation_request(text):
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–≤ —Ä–∞–±–æ—Ç–µ" –≤ —Ç–∞–±–ª–∏—Ü–µ –æ–±—Ä–∞—â–µ–Ω–∏–π
            if appeals_service and appeals_service.is_available():
                try:
                    success = appeals_service.set_status_in_work(user.id)
                    if success:
                        logger.info(f"–°—Ç–∞—Ç—É—Å '–≤ —Ä–∞–±–æ—Ç–µ' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                        await update.message.reply_text(
                            "‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –æ—Ç–¥–µ–ª–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞. "
                            "–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–≤ —Ä–∞–±–æ—Ç–µ'. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                        )
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å '–≤ —Ä–∞–±–æ—Ç–µ' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                        await update.message.reply_text(
                            "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {e}")
                    await update.message.reply_text(
                        "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                    )
            else:
                await update.message.reply_text(
                    "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI
        if not openai_service or not openai_service.is_enabled():
            await update.message.reply_text(
                "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –ø–æ–∑–∂–µ."
            )
            return

        # –ò–Ω–¥–∏–∫–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞
        try:
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        except Exception:
            pass

        try:
            reply = await asyncio.get_event_loop().run_in_executor(
                None, openai_service.ask, user.id, text
            )
            if reply:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ò–ò –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"–û—Ç–≤–µ—Ç –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {reply[:200]}...")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ —Ç–∞–±–ª–∏—Ü—É –æ–±—Ä–∞—â–µ–Ω–∏–π
                if appeals_service and appeals_service.is_available():
                    try:
                        success = appeals_service.add_ai_response(user.id, reply)
                        if success:
                            logger.info(f"–û—Ç–≤–µ—Ç –ò–ò –∑–∞–ø–∏—Å–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                        else:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}")
                
                # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ Markdown
                clean_reply = reply.replace('*', '').replace('_', '').replace('[', '').replace(']', '').replace('`', '')
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await update.message.reply_text(
                        clean_reply
                    )
                    logger.info(f"–û—Ç–≤–µ—Ç –ò–ò –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}")
                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                    await update.message.reply_text(
                        "–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
                    )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É" –µ—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
                if _is_user_escalation_request(text):
                    try:
                        await update.message.reply_text(
                            "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                            reply_markup=create_specialist_button()
                        )
                        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {e}")
                
            else:
                await update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    return handle_chat


def callback_query_handler(auth_service: AuthService, appeals_service: AppealsService):
    """–§–∞–±—Ä–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è callback query (–∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏)."""
    async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        user = update.effective_user
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
        await query.answer()
        
        logger.info(f"Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {query.data}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not auth_service.get_user_auth_status(user.id):
            await query.edit_message_text(
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ /start."
            )
            return
        
        if query.data == "contact_specialist":
            # –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
            if appeals_service and appeals_service.is_available():
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    records = auth_service.worksheet.get_all_records()
                    user_data = None
                    for record in records:
                        if str(record.get('Telegram ID', '')) == str(user.id):
                            user_data = record
                            break
                    
                    if user_data:
                        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤ —Ä–∞–±–æ—Ç–µ" —Å –∑–∞–ª–∏–≤–∫–æ–π
                        success = appeals_service.set_status_in_work(user.id)
                        if success:
                            await query.edit_message_text(
                                "‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –æ—Ç–¥–µ–ª–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞. "
                                "–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–≤ —Ä–∞–±–æ—Ç–µ'. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                            )
                        else:
                            await query.edit_message_text(
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                            )
                    else:
                        await query.edit_message_text(
                            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: {e}")
                    await query.edit_message_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
            else:
                await query.edit_message_text(
                    "‚ùå –°–µ—Ä–≤–∏—Å –æ–±—Ä–∞—â–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
    
    return handle_callback_query
