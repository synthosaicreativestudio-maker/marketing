#!/usr/bin/env python3
"""MarketingBot - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"""
import json
import logging
import os
import time
from pathlib import Path

import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
log = logging.getLogger(__name__)


class MarketingBot:
    """–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"""
    
    def __init__(self, token: str, webapp_url: str):
        self.token = token
        self.api_url = f"https://api.telegram.org/bot{token}"
        self.webapp_url = webapp_url
        self.offset = 0
        self.running = False

    def send_message(self, chat_id: int, text: str, reply_markup=None) -> dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
        data = {
            'chat_id': chat_id,
            'text': text
        }
        if reply_markup:
            data['reply_markup'] = json.dumps(reply_markup)
        
        try:
            response = requests.post(
                f"{self.api_url}/sendMessage", 
                json=data, 
                timeout=30
            )
            return response.json()
        except requests.RequestException as e:
            log.error(f"Error sending message: {e}")
            return {'ok': False, 'error': str(e)}

    def get_updates(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
        params = {
            'offset': self.offset,
            'timeout': 30
        }
        try:
            response = requests.get(
                f"{self.api_url}/getUpdates", 
                params=params, 
                timeout=35
            )
            return response.json()
        except requests.RequestException as e:
            log.error(f"Error getting updates: {e}")
            return {'ok': False, 'result': []}

    def handle_start(self, update: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        message = update.get('message', {})
        chat_id = message.get('chat', {}).get('id')
        user = message.get('from', {})
        
        if not chat_id:
            return
        
        name = user.get('first_name') or user.get('username') or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        text = f"–ü—Ä–∏–≤–µ—Ç, {name}!\n\n–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å WebApp –∫–Ω–æ–ø–∫–æ–π
        keyboard = {
            'keyboard': [[{
                'text': 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è',
                'web_app': {'url': self.webapp_url}
            }]],
            'resize_keyboard': True,
            'one_time_keyboard': True
        }
        
        result = self.send_message(chat_id, text, keyboard)
        if result.get('ok'):
            log.info(f"Sent start message to user {chat_id}")
        else:
            log.error(f"Failed to send start message: {result}")

    def handle_web_app_data(self, update: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp"""
        message = update.get('message', {})
        chat_id = message.get('chat', {}).get('id')
        web_app_data = message.get('web_app_data', {})
        data = web_app_data.get('data', '')
        
        if not chat_id:
            return
        
        log.info(f"Received web app data from chat {chat_id}")
        
        try:
            # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp
            auth_data = json.loads(data)
            partner_code = auth_data.get('partner_code', '').strip()
            partner_phone = auth_data.get('partner_phone', '').strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if not partner_code.isdigit():
                self.send_message(chat_id, "‚ùå –ö–æ–¥ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
                return
            
            if not partner_phone:
                self.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if self.check_authorization(partner_code, partner_phone, chat_id):
                self.send_message(chat_id, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            else:
                self.send_message(chat_id, "‚ùå –ü–∞—Ä—Ç–Ω—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                
        except json.JSONDecodeError:
            log.error(f"Invalid JSON data from WebApp: {data}")
            self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            log.error(f"Error processing web app data: {e}")
            self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

    def check_authorization(self, partner_code: str, partner_phone: str, telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Google Sheets
            from sheets import normalize_phone, find_row_by_partner_and_phone, update_row_with_auth, SheetsNotConfiguredError
            
            phone_norm = normalize_phone(partner_phone)
            row = find_row_by_partner_and_phone(partner_code, phone_norm)
            
            if row:
                update_row_with_auth(row, telegram_id, status='authorized')
                log.info(f"Authorized partner {partner_code} with phone {phone_norm}")
                return True
            else:
                log.warning(f"Partner {partner_code} with phone {phone_norm} not found")
                return False
                
        except (ImportError, SheetsNotConfiguredError):
            # Fallback: –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            log.info("Using fallback authorization (Google Sheets not configured)")
            return self.fallback_authorization(partner_code, partner_phone)
        except Exception as e:
            log.error(f"Error in authorization check: {e}")
            return False

    def fallback_authorization(self, partner_code: str, partner_phone: str) -> bool:
        """Fallback –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ–º–æ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
        if partner_code == '111098' and '1055' in partner_phone:
            log.info(f"Fallback authorization successful for {partner_code}")
            return True
        return False

    def process_update(self, update: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            if 'message' in update:
                message = update['message']
                text = message.get('text', '')
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
                if text == '/start':
                    self.handle_start(update)
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
                elif 'web_app_data' in message:
                    self.handle_web_app_data(update)
                    
        except Exception as e:
            log.error(f"Error processing update: {e}")

    def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        self.running = True
        log.info("üöÄ MarketingBot –∑–∞–ø—É—â–µ–Ω!")
        log.info(f"üì± WebApp URL: {self.webapp_url}")
        
        while self.running:
            try:
                result = self.get_updates()
                
                if result.get('ok'):
                    updates = result.get('result', [])
                    
                    for update in updates:
                        self.process_update(update)
                        self.offset = update['update_id'] + 1
                        
                else:
                    log.error(f"API error: {result}")
                    time.sleep(5)
                    
            except KeyboardInterrupt:
                log.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
                self.running = False
                break
            except Exception as e:
                log.error(f"Polling error: {e}")
                time.sleep(5)

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.running = False
        log.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    webapp_url = os.environ.get("WEBAPP_URL", "https://your-domain.com/webapp")
    
    if not token:
        log.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        log.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WebApp URL
    if webapp_url == "https://your-domain.com/webapp":
        log.warning("‚ö†Ô∏è WEBAPP_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞")
    
    log.info(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    log.info(f"   Token: {token[:15]}...")
    log.info(f"   WebApp URL: {webapp_url}")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = MarketingBot(token, webapp_url)
    
    try:
        bot.start_polling()
    except KeyboardInterrupt:
        log.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        bot.stop()
    
    return 0


if __name__ == "__main__":
    exit(main())
