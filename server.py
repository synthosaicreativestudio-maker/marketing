#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ WebApp"""
import http.server
import socketserver
import os
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

class WebAppHandler(http.server.SimpleHTTPRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ WebApp"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory="webapp", **kwargs)
    
    def end_headers(self):
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Telegram WebApp
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()
    
    def log_message(self, format, *args):
        log.info(f"{self.address_string()} - {format % args}")

def main():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.environ.get('PORT', 8080))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ webapp
    webapp_dir = Path('webapp')
    if not webapp_dir.exists():
        log.error("‚ùå –ü–∞–ø–∫–∞ webapp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return 1
    
    if not (webapp_dir / 'index.html').exists():
        log.error("‚ùå –§–∞–π–ª webapp/index.html –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return 1
    
    try:
        with socketserver.TCPServer(("", port), WebAppHandler) as httpd:
            log.info(f"üåê WebApp —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            log.info(f"üì± –î–æ—Å—Ç—É–ø: http://localhost:{port}/")
            log.info(f"üìÅ –†–∞–∑–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑: {webapp_dir.absolute()}")
            httpd.serve_forever()
    except KeyboardInterrupt:
        log.info("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
